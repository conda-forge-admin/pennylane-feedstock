diff --git a/CMakeLists.txt b/CMakeLists.txt
index 21aa319..b58aedb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -56,6 +56,7 @@ option(BUILD_TESTS "Build cpp tests" OFF)
 option(BUILD_BENCHMARKS "Enable cpp benchmarks" OFF)
 
 # Process compile options
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
 include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/process_options.cmake")
 
 set(CMAKE_POLICY_DEFAULT_CMP0127 NEW) # To suppress pybind11 CMP0127 warning
diff --git a/cmake/FindCBLAS.cmake b/cmake/FindCBLAS.cmake
new file mode 100644
index 0000000..aaa9868
--- /dev/null
+++ b/cmake/FindCBLAS.cmake
@@ -0,0 +1,74 @@
+# ==================================================================================================
+# This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This
+# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-
+# width of 100 characters per line.
+#
+# Author(s):
+#   Cedric Nugteren <www.cedricnugteren.nl>
+#
+# ==================================================================================================
+#
+# Defines the following variables:
+#   CBLAS_FOUND          Boolean holding whether or not the Netlib BLAS library was found
+#   CBLAS_INCLUDE_DIRS   The Netlib BLAS include directory
+#   CBLAS_LIBRARIES      The Netlib BLAS library
+#
+# In case BLAS is not installed in the default directory, set the CBLAS_ROOT variable to point to
+# the root of BLAS, such that 'cblas.h' can be found in $CBLAS_ROOT/include. This can either be
+# done using an environmental variable (e.g. export CBLAS_ROOT=/path/to/BLAS) or using a CMake
+# variable (e.g. cmake -DCBLAS_ROOT=/path/to/BLAS ..).
+#
+# ==================================================================================================
+
+# Sets the possible install locations
+set(CBLAS_HINTS
+  ${CBLAS_ROOT}
+  $ENV{CBLAS_ROOT}
+)
+set(CBLAS_PATHS
+  /usr
+  /usr/local
+  /usr/local/opt
+  /System/Library/Frameworks
+)
+
+# Finds the include directories
+find_path(CBLAS_INCLUDE_DIRS
+  NAMES cblas.h
+  HINTS ${CBLAS_HINTS}
+  PATH_SUFFIXES
+    include inc include/x86_64 include/x64
+    openblas/include include/blis blis/include blis/include/blis
+    Accelerate.framework/Versions/Current/Frameworks/vecLib.framework/Versions/Current/Headers
+  PATHS ${CBLAS_PATHS}
+  DOC "Netlib BLAS include header cblas.h"
+)
+mark_as_advanced(CBLAS_INCLUDE_DIRS)
+
+# Finds the library
+find_library(CBLAS_LIBRARIES
+  NAMES cblas blas blis openblas accelerate
+  HINTS ${CBLAS_HINTS}
+  PATH_SUFFIXES
+    lib lib64 lib/x86_64 lib/x64 lib/x86 lib/Win32 lib/import lib64/import
+    openblas/lib blis/lib lib/atlas-base
+  PATHS ${CBLAS_PATHS}
+  DOC "Netlib BLAS library"
+)
+mark_as_advanced(CBLAS_LIBRARIES)
+
+# ==================================================================================================
+
+# Notification messages
+if(NOT CBLAS_INCLUDE_DIRS)
+    message(STATUS "Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT")
+endif()
+if(NOT CBLAS_LIBRARIES)
+    message(STATUS "Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT")
+endif()
+
+# Determines whether or not BLAS was found
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(CBLAS DEFAULT_MSG CBLAS_INCLUDE_DIRS CBLAS_LIBRARIES)
+
+# ==================================================================================================
\ No newline at end of file
diff --git a/cmake/FindMKL.cmake b/cmake/FindMKL.cmake
new file mode 100644
index 0000000..7714148
--- /dev/null
+++ b/cmake/FindMKL.cmake
@@ -0,0 +1,78 @@
+###########################################################
+# Adapted from PRACE course materials at:
+# https://repository.prace-ri.eu/git/CodeVault/hpc-kernels/spectral_methods/-/blob/master/cmake/Modules/FindMKL.cmake
+###########################################################
+
+# This script looks for MKL in two locations:
+# - The environment variable MKLROOT, which is defined by
+#    sourcing an MKL environment
+# - The directory `/opt/intel/mkl`, which is a common
+#    install location for MKL.
+# It may be possible to install MKL using python -m pip,
+# though this is not guaranteed to be found, and may
+# require explicitly setting the MKLROOT variable.
+
+###########################################################
+# Stage 1: find the root directory
+###########################################################
+
+set(MKLROOT_PATH $ENV{MKLROOT})
+
+if (NOT MKLROOT_PATH)
+  if (EXISTS "/opt/intel/mkl")
+    set(MKLROOT_PATH "/opt/intel/mkl")
+  endif ()
+endif ()
+
+###########################################################
+# Stage 2: find include path and libraries
+###########################################################
+
+if (MKLROOT_PATH)
+
+    set(EXPECT_MKL_INCPATH "${MKLROOT_PATH}/include")
+    set(EXPECT_ICC_LIBPATH "$ENV{ICC_LIBPATH}")
+
+    # MacOS will have a different path structure
+    if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
+        set(EXPECT_MKL_LIBPATH "${MKLROOT_PATH}/lib")
+    elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
+        set(EXPECT_MKL_LIBPATH "${MKLROOT_PATH}/lib/intel64")
+    endif()
+    
+    ###########################################################
+    # Set MKL_INCLUDE and MKL_LIBRARY_DIR
+    ###########################################################
+
+    if (IS_DIRECTORY ${EXPECT_MKL_INCPATH})
+        set(MKL_INCLUDE_DIR ${EXPECT_MKL_INCPATH})
+    endif (IS_DIRECTORY ${EXPECT_MKL_INCPATH})
+
+    if (IS_DIRECTORY ${EXPECT_MKL_LIBPATH})
+        set(MKL_LIBRARY_DIR ${EXPECT_MKL_LIBPATH})
+    endif (IS_DIRECTORY ${EXPECT_MKL_LIBPATH})
+
+    ###########################################################
+    # find specific library files
+    ###########################################################
+
+    find_library(LIB_MKL_RT NAMES mkl_rt mkl_rt.1 HINTS ${MKL_LIBRARY_DIR})
+    find_library(LIB_PTHREAD NAMES pthread) 
+
+endif (MKLROOT_PATH)
+
+set(MKL_LIBRARY "${LIB_MKL_RT};${LIB_PTHREAD}")
+
+###########################################################
+# deal with QUIET and REQUIRED argument
+###########################################################
+
+include(FindPackageHandleStandardArgs)
+
+find_package_handle_standard_args(MKL DEFAULT_MSG 
+                                      MKL_LIBRARY_DIR
+                                      LIB_MKL_RT
+                                      LIB_PTHREAD
+                                      MKL_INCLUDE_DIR)
+
+mark_as_advanced(LIB_MKL_RT LIB_PTHREAD MKL_INCLUDE_DIR)
\ No newline at end of file
diff --git a/cmake/process_options.cmake b/cmake/process_options.cmake
index d9e6451..927610a 100644
--- a/cmake/process_options.cmake
+++ b/cmake/process_options.cmake
@@ -107,7 +107,7 @@ macro(FindKokkos target_name)
 
             FetchContent_Declare(kokkos
                                 GIT_REPOSITORY https://github.com/kokkos/kokkos.git
-                                GIT_TAG        3.7.00
+                                GIT_TAG        4.0.01
                                 GIT_SUBMODULES "" # Avoid recursively cloning all submodules
             )
 
@@ -118,7 +118,7 @@ macro(FindKokkos target_name)
 
             FetchContent_Declare(kokkoskernels
                                 GIT_REPOSITORY https://github.com/kokkos/kokkos-kernels.git
-                                GIT_TAG        3.7.00
+                                GIT_TAG        4.0.01
                                 GIT_SUBMODULES "" # Avoid recursively cloning all submodules
             )
 
@@ -155,20 +155,6 @@ add_library(lightning_external_libs INTERFACE)
 # It will be uncommented when we move to a newer set-up.
 # target_compile_features(lightning_compile_options INTERFACE cxx_std_20)
 
-# Initial attempt to find which BLAS implementation is chosen
-function(get_blas_impl)
-    string(FIND "${BLAS_LIBRARIES}" "mkl" FOUND_MKL)
-    string(FIND "${BLAS_LIBRARIES}" "openblas" FOUND_OPENBLAS)
-
-    if (NOT (FOUND_MKL EQUAL -1)) # MKL is found
-        set(BLAS_IMPL "MKL" PARENT_SCOPE)
-    elseif (NOT (FOUND_OPENBLAS EQUAL -1))
-        set(BLAS_IMPL "OpenBLAS" PARENT_SCOPE)
-    else()
-        set(BLAS_IMPL "Unknown" PARENT_SCOPE)
-    endif()
-endfunction()
-
 if(MSVC) # For M_PI
     target_compile_options(lightning_compile_options INTERFACE /D_USE_MATH_DEFINES)
 endif()
@@ -222,20 +208,20 @@ endif()
 
 if(ENABLE_BLAS)
     message(STATUS "ENABLE_BLAS is ON.")
-    find_package(BLAS)
+    find_package(MKL QUIET)
 
-    if(NOT BLAS_FOUND)
-        message(FATAL_ERROR "BLAS is enabled but not found.")
+    if(MKL_FOUND)
+        add_definitions("-DENABLE_MKL")
+        set(BLAS_INCLUDE_DIRS "${MKL_INCLUDE_DIR}")
+        set(BLAS_LIBRARIES ${MKL_LIBRARY})
+    else()
+        find_package(CBLAS REQUIRED)
+        set(BLAS_LIBRARIES ${CBLAS_LIBRARIES})
+        set(BLAS_INCLUDE_DIRS ${CBLAS_INCLUDE_DIRS})
     endif()
 
-    get_blas_impl()
-    message(STATUS "Use ${BLAS_IMPL} for BLAS implementation. Set BLA_VENDOR variable "
-                   "if you want to use a different BLAS implementation. "
-                   "See https://cmake.org/cmake/help/latest/module/FindBLAS.html"
-                   "#blas-lapack-vendors for available options.")
-
     target_link_libraries(lightning_external_libs INTERFACE "${BLAS_LIBRARIES}")
-    target_link_options(lightning_external_libs INTERFACE "${BLAS_LINKER_FLAGS}")
+    target_include_directories(lightning_external_libs INTERFACE "${BLAS_INCLUDE_DIRS}")
     target_compile_options(lightning_compile_options INTERFACE "-D_ENABLE_BLAS=1")
 else()
     message(STATUS "ENABLE_BLAS is OFF.")
diff --git a/pennylane_lightning/src/CMakeLists.txt b/pennylane_lightning/src/CMakeLists.txt
index 8fe1234..c0ef40b 100644
--- a/pennylane_lightning/src/CMakeLists.txt
+++ b/pennylane_lightning/src/CMakeLists.txt
@@ -22,6 +22,7 @@ endif()
 ###############################################################################
 # Process options
 ###############################################################################
+list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/../../cmake")
 include("${PROJECT_SOURCE_DIR}/../../cmake/process_options.cmake")
 
 
