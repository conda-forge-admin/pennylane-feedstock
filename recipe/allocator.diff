diff --git a/pennylane_lightning/src/simulator/Observables.hpp b/pennylane_lightning/src/simulator/Observables.hpp
index f803276..aa43d5c 100644
--- a/pennylane_lightning/src/simulator/Observables.hpp
+++ b/pennylane_lightning/src/simulator/Observables.hpp
@@ -312,7 +312,7 @@ template <class T> struct HamiltonianApplyInPlace<T, true> {
                     const std::vector<std::shared_ptr<Observable<T>>> &terms,
                     StateVectorManagedCPU<T> &sv) {
         const size_t length = sv.getLength();
-        const auto allocator = sv.allocator();
+        auto allocator = sv.allocator();
 
         std::vector<std::complex<T>, decltype(allocator)> sum(
             length, std::complex<T>{}, allocator);
diff --git a/pennylane_lightning/src/util/Memory.hpp b/pennylane_lightning/src/util/Memory.hpp
index eeaafbc..2abc65a 100644
--- a/pennylane_lightning/src/util/Memory.hpp
+++ b/pennylane_lightning/src/util/Memory.hpp
@@ -80,7 +80,16 @@ template <class T> class AlignedAllocator {
     const uint32_t alignment_;
 
   public:
+    using pointer = T *;
+    using const_pointer = const T *;
+    using void_pointer = void *;
+    using const_void_pointer = const void *;
     using value_type = T;
+    using size_type = std::size_t;
+    using difference_type = std::ptrdiff_t;
+    using propagate_on_container_move_assignment = std::true_type;
+
+    template <typename U> struct rebind { using other = AlignedAllocator<U>; };
 
     /**
      * @brief Constructor of AlignedAllocator class
@@ -100,8 +109,6 @@ template <class T> class AlignedAllocator {
      */
     [[nodiscard]] inline uint32_t alignment() const { return alignment_; }
 
-    template <class U> struct rebind { using other = AlignedAllocator<U>; };
-
     template <typename U>
     explicit constexpr AlignedAllocator(
         [[maybe_unused]] const AlignedAllocator<U> &rhs) noexcept
