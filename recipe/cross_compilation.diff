diff --git a/setup.py b/setup.py
index 91c6aa8..96c064b 100644
--- a/setup.py
+++ b/setup.py
@@ -51,11 +51,8 @@ class CMakeBuild(build_ext):
         debug = int(os.environ.get("DEBUG", 0)) if self.debug is None else self.debug
         ninja_path = str(shutil.which("ninja"))
 
-        # Set Python_EXECUTABLE instead if you use PYBIND11_FINDPYTHON
         configure_args = [
             f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}",
-            f"-DPython_EXECUTABLE={sys.executable}",  # (Windows)
-            f"-DPYTHON_EXECUTABLE={sys.executable}",  # (Ubuntu)
             "-DENABLE_WARNINGS=OFF",  # Ignore warnings
         ]

@@ -83,25 +80,7 @@ class CMakeBuild(build_ext):
 
         # Add more platform dependent options
         if platform.system() == "Darwin":
-            # To support ARM64
-            if os.getenv("ARCHS") == "arm64":
-                configure_args += [
-                    "-DCMAKE_CXX_COMPILER_TARGET=arm64-apple-macos11",
-                    "-DCMAKE_SYSTEM_NAME=Darwin",
-                    "-DCMAKE_SYSTEM_PROCESSOR=ARM64",
-                ]
-            else:  # X64 arch
-                if shutil.which("brew"):
-                    llvmpath = (
-                        subprocess.check_output(["brew", "--prefix", "llvm"]).decode().strip()
-                    )
-                else:
-                    llvmpath = shutil.which("clang++")
-                    llvmpath = Path(llvmpath).parent.parent
-                configure_args += [
-                    f"-DCMAKE_CXX_COMPILER={llvmpath}/bin/clang++",
-                    f"-DCMAKE_LINKER={llvmpath}/bin/lld",
-                ]  # Use clang instead of appleclang
+            # Don't do anything, let conda-build handle it
             # Disable OpenMP in M1 Macs
             configure_args += [] if os.environ.get("USE_OMP") else ["-DENABLE_OPENMP=OFF"]
         elif platform.system() == "Windows":
@@ -112,9 +91,13 @@ class CMakeBuild(build_ext):
         if not Path(self.build_temp).exists():
             os.makedirs(self.build_temp)
 
-        subprocess.check_call(["cmake", str(ext.sourcedir)] + configure_args, cwd=self.build_temp)
         subprocess.check_call(
-            ["cmake", "--build", ".", "--verbose"] + build_args, cwd=self.build_temp
+            ["cmake"] + os.environ["CMAKE_ARGS"].split(" ") + [str(ext.sourcedir)] + configure_args,
+            cwd=self.build_temp, env=os.environ,
+        )
+        subprocess.check_call(
+            ["cmake", "--build", ".", "--verbose"] + build_args,
+            cwd=self.build_temp, env=os.environ,
         )

 
