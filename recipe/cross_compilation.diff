diff --git a/setup.py b/setup.py
index 91c6aa8..7ba2031 100644
--- a/setup.py
+++ b/setup.py
@@ -51,11 +51,8 @@ class CMakeBuild(build_ext):
         debug = int(os.environ.get("DEBUG", 0)) if self.debug is None else self.debug
         ninja_path = str(shutil.which("ninja"))
 
-        # Set Python_EXECUTABLE instead if you use PYBIND11_FINDPYTHON
         configure_args = [
             f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}",
-            f"-DPython_EXECUTABLE={sys.executable}",  # (Windows)
-            f"-DPYTHON_EXECUTABLE={sys.executable}",  # (Ubuntu)
             "-DENABLE_WARNINGS=OFF",  # Ignore warnings
         ]
 
@@ -86,9 +83,9 @@ class CMakeBuild(build_ext):
             # To support ARM64
             if os.getenv("ARCHS") == "arm64":
                 configure_args += [
-                    "-DCMAKE_CXX_COMPILER_TARGET=arm64-apple-macos11",
-                    "-DCMAKE_SYSTEM_NAME=Darwin",
-                    "-DCMAKE_SYSTEM_PROCESSOR=ARM64",
+                    # this refers to the host Python, not build Python
+                    f"-DPython3_EXECUTABLE=\"{os.environ['PYTHON']}\"",
+                    f"-DPYTHON_EXECUTABLE=\"{os.environ['PYTHON']}\"",
                 ]
             else:  # X64 arch
                 if shutil.which("brew"):
@@ -112,9 +109,15 @@ class CMakeBuild(build_ext):
         if not Path(self.build_temp).exists():
             os.makedirs(self.build_temp)
 
-        subprocess.check_call(["cmake", str(ext.sourcedir)] + configure_args, cwd=self.build_temp)
+        print(f"{configure_args=}")
+        print(f"{build_args=}")
         subprocess.check_call(
-            ["cmake", "--build", ".", "--verbose"] + build_args, cwd=self.build_temp
+            ["cmake"] + os.environ["CMAKE_ARGS"].split(" ") + [str(ext.sourcedir)] + configure_args,
+            cwd=self.build_temp, env=os.environ,
+        )
+        subprocess.check_call(
+            ["cmake", "--build", ".", "--verbose"] + build_args,
+            cwd=self.build_temp, env=os.environ,
         )

 
