diff --git a/setup.py b/setup.py
index bbadb97..c78ea63 100644
--- a/setup.py
+++ b/setup.py
@@ -32,7 +32,9 @@ class CMakeBuild(build_ext):
     This class is built upon https://github.com/diegoferigo/cmake-build-extension/blob/master/src/cmake_build_extension/build_extension.py and https://github.com/pybind/cmake_example/blob/master/setup.py
     """
 
-    user_options = build_ext.user_options + [("define=", "D", "Define variables for CMake")]
+    user_options = build_ext.user_options + [
+        ("define=", "D", "Define variables for CMake")
+    ]
 
     def initialize_options(self):
         super().initialize_options()
@@ -51,11 +53,8 @@ class CMakeBuild(build_ext):
         debug = int(os.environ.get("DEBUG", 0)) if self.debug is None else self.debug
         ninja_path = str(shutil.which("ninja"))
 
-        # Set Python_EXECUTABLE instead if you use PYBIND11_FINDPYTHON
         configure_args = [
             f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}",
-            f"-DPython_EXECUTABLE={sys.executable}",  # (Windows)
-            f"-DPYTHON_EXECUTABLE={sys.executable}",  # (Ubuntu)
             "-DENABLE_WARNINGS=OFF",  # Ignore warnings
         ]
 
@@ -83,55 +82,11 @@ class CMakeBuild(build_ext):
 
         # Add more platform dependent options
         if platform.system() == "Darwin":
-            # To support ARM64
-            if os.getenv("ARCHS") == "arm64":
-                configure_args += [
-                    "-DCMAKE_CXX_COMPILER_TARGET=arm64-apple-macos11",
-                    "-DCMAKE_SYSTEM_NAME=Darwin",
-                    "-DCMAKE_SYSTEM_PROCESSOR=ARM64",
-                    "-DENABLE_OPENMP=OFF",
-                ]
-            else:  # X64 arch
-                # If we explicitly request a brew LLVM version, use that
-                if os.getenv("BREW_LLVM_VERSION") and shutil.which("brew"):
-                    brew_llvm_version = os.getenv("BREW_LLVM_VERSION")
-                    llvmpath = subprocess.run(
-                        [
-                            "brew",
-                            "--prefix",
-                            "llvm" + f"@{brew_llvm_version}" if brew_llvm_version else "",
-                        ],
-                        check=True,
-                        capture_output=True,
-                        text=True,
-                    ).stdout.strip()
-                
-                else:
-                    # No brew, use the default clang++ install provided by MacOS
-                    llvmpath = shutil.which("clang++")
-                    llvmpath = Path(llvmpath).parent.parent
-
-                # Ensure the appropriate compiler and linker are chosen
-                configure_args += [
-                    f"-DCMAKE_CXX_COMPILER={llvmpath}/bin/clang++",
-                    f"-DCMAKE_LINKER={llvmpath}/bin/lld",
-                ]  # Use clang instead of appleclang
-
-                # Try to support OpenMP through libomp if available
-                if os.environ.get("USE_OMP") and shutil.which("brew"):
-                    libomp_path = subprocess.run(
-                        [
-                            "brew",
-                            "--prefix",
-                            "libomp",
-                        ],
-                        check=False,
-                        capture_output=True,
-                        text=True,
-                    ).stdout.strip()
-                    configure_args += (
-                        [f"-DOpenMP_ROOT={libomp_path}/"] if libomp_path else ["-DENABLE_OPENMP=OFF"]
-                    )
+            # Don't do anything, let conda-build handle the config
+            # Disable OpenMP in M1 Macs
+            configure_args += (
+                [] if os.environ.get("USE_OMP") else ["-DENABLE_OPENMP=OFF"]
+            )
         elif platform.system() == "Windows":
             configure_args += ["-DENABLE_OPENMP=OFF", "-DENABLE_BLAS=OFF"]
         elif platform.system() != "Linux":
@@ -140,11 +95,21 @@ class CMakeBuild(build_ext):
         if not Path(self.build_temp).exists():
             os.makedirs(self.build_temp)
 
-        subprocess.run(
-            ["cmake", str(ext.sourcedir)] + configure_args, cwd=self.build_temp, check=True
+        if "CMAKE_ARGS" not in os.environ.keys():
+            os.environ["CMAKE_ARGS"] = ""
+
+        subprocess.check_call(
+            ["cmake"]
+            + os.environ["CMAKE_ARGS"].split(" ")
+            + [str(ext.sourcedir)]
+            + configure_args,
+            cwd=self.build_temp,
+            env=os.environ,
         )
-        subprocess.run(
-            ["cmake", "--build", ".", "--verbose"] + build_args, cwd=self.build_temp, check=True
+        subprocess.check_call(
+            ["cmake", "--build", ".", "--verbose"] + build_args,
+            cwd=self.build_temp,
+            env=os.environ,
         )
 
 
@@ -164,7 +129,10 @@ info = {
     "license": "Apache License 2.0",
     "packages": find_packages(where="."),
     "package_data": {
-        "pennylane_lightning": [os.path.join("src", "*"), os.path.join("src", "**", "*")]
+        "pennylane_lightning": [
+            os.path.join("src", "*"),
+            os.path.join("src", "**", "*"),
+        ]
     },
     "include_package_data": True,
     "entry_points": {
